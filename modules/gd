<?php
/*. DOC   Image Functions

See: <a href="http://www.php.net/manual/en/ref.image.php"><code>http://www.php.net/manual/en/ref.image.php</code></a>

.*/

# Required for E_WARNING:
/*. require_module 'standard'; .*/


# FIXME: all these values are dummy:
define('GD_VERSION', "?");
define('GD_MAJOR_VERSION', 2);
define('GD_MINOR_VERSION', 3);
define('GD_RELEASE_VERSION', 4);
define('GD_EXTRA_VERSION', "?");
define("GD_BUNDLED", 6);
define("IMG_GIF", 7);
define("IMG_JPG", 8);
define("IMG_JPEG", 9);
define("IMG_PNG", 10);
define("IMG_WBMP", 11);
define("IMG_XPM", 12);
define("IMG_COLOR_TILED", 13);
define("IMG_COLOR_STYLED", 14);
define("IMG_COLOR_BRUSHED", 15);
define("IMG_COLOR_STYLEDBRUSHED", 16);
define("IMG_COLOR_TRANSPARENT", 17);
define("IMG_ARC_ROUNDED", 18);
define("IMG_ARC_PIE", 19);
define("IMG_ARC_CHORD", 20);
define("IMG_ARC_NOFILL", 21);
define("IMG_ARC_EDGED", 22);
define("IMG_GD2_RAW", 23);
define("IMG_GD2_COMPRESSED", 24);
define("IMG_EFFECT_REPLACE", 25);
define("IMG_EFFECT_ALPHABLEND", 26);
define("IMG_EFFECT_NORMAL", 27);
define("IMG_EFFECT_OVERLAY", 28);
define("IMG_FILTER_NEGATE", 29);
define("IMG_FILTER_GRAYSCALE", 30);
define("IMG_FILTER_BRIGHTNESS", 31);
define("IMG_FILTER_CONTRAST", 32);
define("IMG_FILTER_COLORIZE", 33);
define("IMG_FILTER_EDGEDETECT", 34);
define("IMG_FILTER_GAUSSIAN_BLUR", 35);
define("IMG_FILTER_SELECTIVE_BLUR", 36);
define("IMG_FILTER_EMBOSS", 37);
define("IMG_FILTER_MEAN_REMOVAL", 38);
define("IMG_FILTER_SMOOTH", 39);
define('IMAGETYPE_GIF', 40);
define('IMAGETYPE_JPEG', 41);
define('IMAGETYPE_PNG', 42);
define('IMAGETYPE_SWF', 43);
define('IMAGETYPE_PSD', 44);
define('IMAGETYPE_BMP', 45);
define('IMAGETYPE_WBMP', 46);
define('IMAGETYPE_XBM', 47);
define('IMAGETYPE_TIFF_II', 48);
define('IMAGETYPE_TIFF_MM', 49);
define('IMAGETYPE_IFF', 50);
define('IMAGETYPE_JB2', 51);
define('IMAGETYPE_JPC', 52);
define('IMAGETYPE_JP2', 53);
define('IMAGETYPE_JPX', 54);
define('IMAGETYPE_SWC', 55);
define('IMAGETYPE_ICO', 56);
define('PNG_NO_FILTER', 57);
define('PNG_FILTER_NONE', 58);
define('PNG_FILTER_SUB', 59);
define('PNG_FILTER_UP', 60);
define('PNG_FILTER_AVG', 61);
define('PNG_FILTER_PAETH', 62);
define('PNG_ALL_FILTERS', 63);

/*. array .*/ function gd_info(){}
/*. array[]mixed .*/ function getimagesize(/*. string .*/ $fn /*., args .*/)
{ trigger_error("", E_WARNING); }
/*. int   .*/ function imageloadfont(/*. string .*/ $filename){}
/*. bool  .*/ function imagesetstyle(/*. resource .*/ $im, /*. array .*/ $styles){}
/*. resource .*/ function imagecreatetruecolor(/*. int .*/ $x_size, /*. int .*/ $y_size){}
/*. bool  .*/ function imageistruecolor(/*. resource .*/ $im){}
/*. void .*/ function imagetruecolortopalette(/*. resource .*/ $im, /*. bool .*/ $ditherFlag, /*. int .*/ $colorsWanted){}
/*. bool  .*/ function imagecolormatch(/*. resource .*/ $im1, /*. resource .*/ $im2){}
/*. bool  .*/ function imagesetthickness(/*. resource .*/ $im, /*. int .*/ $thickness){}
/*. bool  .*/ function imagefilledellipse(/*. resource .*/ $im, /*. int .*/ $cx, /*. int .*/ $cy, /*. int .*/ $w, /*. int .*/ $h, /*. int .*/ $color){}
/*. bool  .*/ function imagefilledarc(/*. resource .*/ $im, /*. int .*/ $cx, /*. int .*/ $cy, /*. int .*/ $w, /*. int .*/ $h, /*. int .*/ $s, /*. int .*/ $e, /*. int .*/ $col, /*. int .*/ $style){}
/*. bool  .*/ function imagealphablending(/*. resource .*/ $im, /*. bool .*/ $on){}
/*. bool  .*/ function imagesavealpha(/*. resource .*/ $im, /*. bool .*/ $on){}
/*. bool  .*/ function imagelayereffect(/*. resource .*/ $im, /*. int .*/ $effect){}
/*. int   .*/ function imagecolorallocatealpha(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue, /*. int .*/ $alpha){}
/*. int   .*/ function imagecolorresolvealpha(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue, /*. int .*/ $alpha){}
/*. int   .*/ function imagecolorclosestalpha(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue, /*. int .*/ $alpha){}
/*. int   .*/ function imagecolorexactalpha(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue, /*. int .*/ $alpha){}
/*. bool  .*/ function imagecopyresampled(/*. resource .*/ $dst_im, /*. resource .*/ $src_im, /*. int .*/ $dst_x, /*. int .*/ $dst_y, /*. int .*/ $src_x, /*. int .*/ $src_y, /*. int .*/ $dst_w, /*. int .*/ $dst_h, /*. int .*/ $src_w, /*. int .*/ $src_h){}
/*. resource .*/ function imagerotate(/*. resource .*/ $src_im, /*. float .*/ $angle, /*. int .*/ $bgdcolor){}
/*. bool  .*/ function imagesettile(/*. resource .*/ $image, /*. resource .*/ $tile){}
/*. bool  .*/ function imagesetbrush(/*. resource .*/ $image, /*. resource .*/ $brush){}
/*. resource .*/ function imagecreate(/*. int .*/ $x_size, /*. int .*/ $y_size){}
/*. int   .*/ function imagetypes(){}
/*. resource .*/ function imagecreatefromstring(/*. string .*/ $image){}
/*. resource .*/ function imagecreatefromgif(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefromjpeg(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefrompng(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefromxbm(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefromxpm(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefromwbmp(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefromgd(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefromgd2(/*. string .*/ $filename){}
/*. resource .*/ function imagecreatefromgd2part(/*. string .*/ $filename, /*. int .*/ $srcX, /*. int .*/ $srcY, /*. int .*/ $width, /*. int .*/ $height){}
/*. int   .*/ function imagexbm(/*. int .*/ $im, /*. string .*/ $filename /*., args .*/){}
/*. bool  .*/ function imagegif(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function imagepng(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function imagejpeg(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function imagewbmp(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function imagegd(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function imagegd2(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function imagedestroy(/*. resource .*/ $im){}
/*. int   .*/ function imagecolorallocate(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue){}
/*. void .*/ function imagepalettecopy(/*. resource .*/ $dst, /*. resource .*/ $src){}
/*. int   .*/ function imagecolorat(/*. resource .*/ $im, /*. int .*/ $x, /*. int .*/ $y){}
/*. int   .*/ function imagecolorclosest(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue){}
/*. int   .*/ function imagecolorclosesthwb(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue){}
/*. bool  .*/ function imagecolordeallocate(/*. resource .*/ $im, /*. int .*/ $index){}
/*. int   .*/ function imagecolorresolve(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue){}
/*. int   .*/ function imagecolorexact(/*. resource .*/ $im, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue){}
/*. void .*/ function imagecolorset(/*. resource .*/ $im, /*. int .*/ $col, /*. int .*/ $red, /*. int .*/ $green, /*. int .*/ $blue){}
/*. array .*/ function imagecolorsforindex(/*. resource .*/ $im, /*. int .*/ $col){}
/*. bool  .*/ function imagegammacorrect(/*. resource .*/ $im, /*. float .*/ $inputgamma, /*. float .*/ $outputgamma){}
/*. bool  .*/ function imagesetpixel(/*. resource .*/ $im, /*. int .*/ $x, /*. int .*/ $y, /*. int .*/ $col){}
/*. bool  .*/ function imageline(/*. resource .*/ $im, /*. int .*/ $x1, /*. int .*/ $y1, /*. int .*/ $x2, /*. int .*/ $y2, /*. int .*/ $col){}

/*. bool  .*/ function imagedashedline(/*. resource .*/ $im, /*. int .*/ $x1, /*. int .*/ $y1, /*. int .*/ $x2, /*. int .*/ $y2, /*. int .*/ $col)
/*. DOC
<@deprecated Use combination of <@item imagesetstyle()> and <@item imageline()> instead.> .*/
{}

/*. bool  .*/ function imagerectangle(/*. resource .*/ $im, /*. int .*/ $x1, /*. int .*/ $y1, /*. int .*/ $x2, /*. int .*/ $y2, /*. int .*/ $col){}
/*. bool  .*/ function imagefilledrectangle(/*. resource .*/ $im, /*. int .*/ $x1, /*. int .*/ $y1, /*. int .*/ $x2, /*. int .*/ $y2, /*. int .*/ $col){}
/*. bool  .*/ function imagearc(/*. resource .*/ $im, /*. int .*/ $cx, /*. int .*/ $cy, /*. int .*/ $w, /*. int .*/ $h, /*. int .*/ $s, /*. int .*/ $e, /*. int .*/ $col){}
/*. bool  .*/ function imageellipse(/*. resource .*/ $im, /*. int .*/ $cx, /*. int .*/ $cy, /*. int .*/ $w, /*. int .*/ $h, /*. int .*/ $color){}
/*. bool  .*/ function imagefilltoborder(/*. resource .*/ $im, /*. int .*/ $x, /*. int .*/ $y, /*. int .*/ $border, /*. int .*/ $col){}
/*. bool  .*/ function imagefill(/*. resource .*/ $im, /*. int .*/ $x, /*. int .*/ $y, /*. int .*/ $col){}
/*. int   .*/ function imagecolorstotal(/*. resource .*/ $im){}
/*. int   .*/ function imagecolortransparent(/*. resource .*/ $im /*., args .*/){}
/*. int   .*/ function imageinterlace(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function imagepolygon(/*. resource .*/ $im, /*. array .*/ $point, /*. int .*/ $num_points, /*. int .*/ $col){}
/*. bool  .*/ function imagefilledpolygon(/*. resource .*/ $im, /*. array .*/ $point, /*. int .*/ $num_points, /*. int .*/ $col){}
/*. int   .*/ function imagefontwidth(/*. int .*/ $font){}
/*. int   .*/ function imagefontheight(/*. int .*/ $font){}
/*. bool  .*/ function imagechar(/*. resource .*/ $im, /*. int .*/ $font, /*. int .*/ $x, /*. int .*/ $y, /*. string .*/ $c, /*. int .*/ $col){}
/*. bool  .*/ function imagecharup(/*. resource .*/ $im, /*. int .*/ $font, /*. int .*/ $x, /*. int .*/ $y, /*. string .*/ $c, /*. int .*/ $col){}
/*. bool  .*/ function imagestring(/*. resource .*/ $im, /*. int .*/ $font, /*. int .*/ $x, /*. int .*/ $y, /*. string .*/ $str, /*. int .*/ $col){}
/*. bool  .*/ function imagestringup(/*. resource .*/ $im, /*. int .*/ $font, /*. int .*/ $x, /*. int .*/ $y, /*. string .*/ $str, /*. int .*/ $col){}
/*. bool  .*/ function imagecopy(/*. resource .*/ $dst_im, /*. resource .*/ $src_im, /*. int .*/ $dst_x, /*. int .*/ $dst_y, /*. int .*/ $src_x, /*. int .*/ $src_y, /*. int .*/ $src_w, /*. int .*/ $src_h){}
/*. bool  .*/ function imagecopymerge(/*. resource .*/ $src_im, /*. resource .*/ $dst_im, /*. int .*/ $dst_x, /*. int .*/ $dst_y, /*. int .*/ $src_x, /*. int .*/ $src_y, /*. int .*/ $src_w, /*. int .*/ $src_h, /*. int .*/ $pct){}
/*. bool  .*/ function imagecopymergegray(/*. resource .*/ $src_im, /*. resource .*/ $dst_im, /*. int .*/ $dst_x, /*. int .*/ $dst_y, /*. int .*/ $src_x, /*. int .*/ $src_y, /*. int .*/ $src_w, /*. int .*/ $src_h, /*. int .*/ $pct){}
/*. bool  .*/ function imagecopyresized(/*. resource .*/ $dst_im, /*. resource .*/ $src_im, /*. int .*/ $dst_x, /*. int .*/ $dst_y, /*. int .*/ $src_x, /*. int .*/ $src_y, /*. int .*/ $dst_w, /*. int .*/ $dst_h, /*. int .*/ $src_w, /*. int .*/ $src_h){}
/*. int   .*/ function imagesx(/*. resource .*/ $im){}
/*. int   .*/ function imagesy(/*. resource .*/ $im){}
/*. array .*/ function imageftbbox(/*. float .*/ $size, /*. float .*/ $angle, /*. string .*/ $font_file, /*. string .*/ $text /*., args .*/){}
/*. array .*/ function imagefttext(/*. resource .*/ $im, /*. float .*/ $size, /*. float .*/ $angle, /*. int .*/ $x, /*. int .*/ $y, /*. int .*/ $col, /*. string .*/ $font_file, /*. string .*/ $text /*., args .*/){}
/*. array .*/ function imagettfbbox(/*. float .*/ $size, /*. float .*/ $angle, /*. string .*/ $font_file, /*. string .*/ $text){}
/*. array .*/ function imagettftext(/*. resource .*/ $im, /*. float .*/ $size, /*. float .*/ $angle, /*. int .*/ $x, /*. int .*/ $y, /*. int .*/ $col, /*. string .*/ $font_file, /*. string .*/ $text){}
/*. resource .*/ function imagepsloadfont(/*. string .*/ $pathname){}
/*. int   .*/ function imagepscopyfont(/*. int .*/ $font_index){}
/*. bool  .*/ function imagepsfreefont(/*. resource .*/ $font_index){}
/*. bool  .*/ function imagepsencodefont(/*. resource .*/ $font_index, /*. string .*/ $filename){}
/*. bool  .*/ function imagepsextendfont(/*. resource .*/ $font_index, /*. float .*/ $extend){}
/*. bool  .*/ function imagepsslantfont(/*. resource .*/ $font_index, /*. float .*/ $slant){}
/*. array .*/ function imagepstext(/*. resource .*/ $image, /*. string .*/ $text, /*. resource .*/ $font, /*. int .*/ $size, /*. int .*/ $xcoord, /*. int .*/ $ycoord /*., args .*/){}
/*. array .*/ function imagepsbbox(/*. string .*/ $text, /*. resource .*/ $font, /*. int .*/ $size /*., args .*/){}
/*. bool  .*/ function image2wbmp(/*. resource .*/ $im /*., args .*/){}
/*. bool  .*/ function jpeg2wbmp(/*. string .*/ $f_org, /*. string .*/ $f_dest, /*. int .*/ $d_height, /*. int .*/ $d_width, /*. int .*/ $threshold){}
/*. bool  .*/ function png2wbmp(/*. string .*/ $f_org, /*. string .*/ $f_dest, /*. int .*/ $d_height, /*. int .*/ $d_width, /*. int .*/ $threshold){}
/*. bool  .*/ function imagefilter(/*. resource .*/ $src_im, /*. int .*/ $filtertype /*., args .*/){}
/*. bool  .*/ function imageantialias(/*. resource .*/ $im, /*. bool .*/ $on){}
/*. array .*/ function iptcparse(/*. string .*/ $iptcblock){}
/*. mixed .*/ function iptcembed(/*. string .*/ $iptcdata, /*. string .*/ $jpeg_file_name /*., args .*/){}
?>
